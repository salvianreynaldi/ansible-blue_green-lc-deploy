---
- name: Check Ansible Version
  fail:
    msg: "Detected ansible version is {{ ansible_version.full }}, please use ansible version >= 2.8.x"
  when: ansible_version.full is version('2.8.0', '<')

- name: Get the AMI
  ec2_ami_facts:
    region: "{{ aws_region }}"
    image_id: "{{ ami_id }}"
  register: ami

- name: The AMI is Found
  debug:
    msg: "{{ ami.images }}"
    verbosity: 3

- name: Fail If the AMI Is Not Found
  fail:
    msg: "Got {{ ami.images|length }} AMI(s), expected 1. Please check `ami_id` parameter."
  when: ami.images|length != 1

- name: Get the ASG
  ec2_asg_facts:
    region: "{{ aws_region }}"
    name: "{{ asg_name }}"
  register: asg

- name: The ASG Is Found
  debug:
    msg: "{{ asg.results }}"
    verbosity: 3

- name: Fail If the ASG Is Not Found
  fail:
    msg: "Got {{ asg.results|length }} asg, expected 1. Please check `asg_name` parameter."
  when: asg.results|length != 1

- name: Get Launch Template Name
  set_fact:
    lt_name: "{{ asg.results[0].launch_configuration_name }}"

- name: Create a new launch template version
  ec2_launch_template:
    name: "{{ lt_name }}"
    image_id: "{{ ami.images[0].image_id }}"
    key_name: my_ssh_key
    instance_type: t2.micro
    iam_instance_profile: myTestProfile
    disable_api_termination: true
  when: replace_new_instances

- name: Update the ASG
  ec2_asg:
    region: "{{ aws_region }}"
    default_cooldown: "{{ asg_default_cooldown }}"
    name: "{{ asg_name }}"
    metrics_collection: "{{ asg_metrics_collection }}"
    launch_template:
      version: "latest"
      launch_template_name: "{{ lt_name }}"
    max_size: "{{ asg_max_size | default(asg.results[0].max_size) }}"
    min_size: "{{ asg_min_size | default(asg.results[0].min_size) }}"
    desired_capacity: "{{ asg_desired_capacity | default(asg.results[0].desired_capacity) }}"
    health_check_type: "{{ asg_health_check_type | default(asg.results[0].health_check_type) }}"
    health_check_period: "{{ asg_health_check_grace_period | default(asg.results[0].health_check_grace_period) }}"
    replace_all_instances: true
    replace_batch_size: "{{ asg_replace_batch_size | default(omit) }}"
    wait_for_instances: "{{ asg_wait_for_instances }}"
    wait_timeout: "{{ asg_wait_timeout }}"
